{
  "manifestVersion": "3.2",
  "proxies": [],
  "impls": {
    "523db36c524837e5db273847e11a8db37ffb48f1005b63ecde6c9d4eedcb9bc6": {
      "address": "0x0819deFeE017AB5BF3Fd0718058675A0a4eE0a09",
      "txHash": "0x317a9d9f56c2bb2f6364784ced2184a01fef78e245aa8518ef8482438807eb0e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:418"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:23"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:75"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:34"
          },
          {
            "contract": "ERC2981ContractWideRoyalties",
            "label": "_royaltiesRecipient",
            "type": "t_address",
            "src": "contracts/ERC2981ContractWideRoyalties.sol:11"
          },
          {
            "contract": "ERC2981ContractWideRoyalties",
            "label": "_royaltiesValue",
            "type": "t_uint256",
            "src": "contracts/ERC2981ContractWideRoyalties.sol:12"
          },
          {
            "contract": "DankMinter",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)1799_storage",
            "src": "contracts/DankMinter.sol:16"
          },
          {
            "contract": "DankMinter",
            "label": "cooldownTime",
            "type": "t_uint256",
            "src": "contracts/DankMinter.sol:19"
          },
          {
            "contract": "DankMinter",
            "label": "votingCooldownTime",
            "type": "t_uint256",
            "src": "contracts/DankMinter.sol:20"
          },
          {
            "contract": "DankMinter",
            "label": "memeToHash",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "contracts/DankMinter.sol:29"
          },
          {
            "contract": "DankMinter",
            "label": "hashToMeme",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/DankMinter.sol:31"
          },
          {
            "contract": "DankMinter",
            "label": "memeToImgHash",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "contracts/DankMinter.sol:33"
          },
          {
            "contract": "DankMinter",
            "label": "imgHashToMeme",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/DankMinter.sol:35"
          },
          {
            "contract": "DankMinter",
            "label": "userCooldown",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/DankMinter.sol:37"
          },
          {
            "contract": "DankMinter",
            "label": "whitelist",
            "type": "t_mapping(t_bytes32,t_bytes32)",
            "src": "contracts/DankMinter.sol:40"
          },
          {
            "contract": "DankMinter",
            "label": "whitelistTokenIds",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/DankMinter.sol:42"
          },
          {
            "contract": "DankMinter",
            "label": "votingCooldown",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/DankMinter.sol:45"
          },
          {
            "contract": "DankMinter",
            "label": "memeScore",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/DankMinter.sol:47"
          },
          {
            "contract": "DankMinter",
            "label": "stashedMemes",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/DankMinter.sol:49"
          },
          {
            "contract": "DankMinter",
            "label": "memeStash",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/DankMinter.sol:51"
          },
          {
            "contract": "DankMinter",
            "label": "memePostings",
            "type": "t_mapping(t_uint256,t_array(t_string_storage)dyn_storage)",
            "src": "contracts/DankMinter.sol:53"
          }
        ],
        "types": {
          "t_struct(Counter)1799_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_bytes32,t_bytes32)": {
            "label": "mapping(bytes32 => bytes32)"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_uint256,t_array(t_string_storage)dyn_storage)": {
            "label": "mapping(uint256 => string[])"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          }
        }
      }
    }
  }
}
