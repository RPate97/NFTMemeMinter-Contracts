{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xD909CDA663fFF0C89866FC933df71841b1AaD354",
    "txHash": "0x75fe66a0c5aef0afd365a5c5de3cb64aef8db520ceb06cc4c07bf04c1bc18e29",
    "deployTransaction": {
      "hash": "0x75fe66a0c5aef0afd365a5c5de3cb64aef8db520ceb06cc4c07bf04c1bc18e29",
      "type": 0,
      "accessList": null,
      "blockHash": null,
      "blockNumber": null,
      "transactionIndex": null,
      "confirmations": 0,
      "from": "0xC6f9519F8e2C2be0bB29A585A894912Ccea62Dc8",
      "gasPrice": {
        "type": "BigNumber",
        "hex": "0x01dcd65000"
      },
      "gasLimit": {
        "type": "BigNumber",
        "hex": "0x0762b4"
      },
      "to": null,
      "value": {
        "type": "BigNumber",
        "hex": "0x00"
      },
      "nonce": 7,
      "data": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610759806100616000396000f3fe60806040526004361061007b5760003560e01c80639623609d1161004e5780639623609d1461011157806399a88ec414610124578063f2fde38b14610144578063f3b7dead146101645761007b565b8063204e1c7a14610080578063715018a6146100bc5780637eff275e146100d35780638da5cb5b146100f3575b600080fd5b34801561008c57600080fd5b506100a061009b366004610515565b610184565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c857600080fd5b506100d1610215565b005b3480156100df57600080fd5b506100d16100ee366004610554565b610292565b3480156100ff57600080fd5b506000546001600160a01b03166100a0565b6100d161011f36600461058c565b61031c565b34801561013057600080fd5b506100d161013f366004610554565b6103ad565b34801561015057600080fd5b506100d161015f366004610515565b610405565b34801561017057600080fd5b506100a061017f366004610515565b6104ef565b6000806000836001600160a01b03166040516101aa90635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101e5576040519150601f19603f3d011682016040523d82523d6000602084013e6101ea565b606091505b5091509150816101f957600080fd5b8080602001905181019061020d9190610538565b949350505050565b6000546001600160a01b031633146102485760405162461bcd60e51b815260040161023f906106c0565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146102bc5760405162461bcd60e51b815260040161023f906106c0565b6040516308f2839760e41b81526001600160a01b038281166004830152831690638f283970906024015b600060405180830381600087803b15801561030057600080fd5b505af1158015610314573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146103465760405162461bcd60e51b815260040161023f906106c0565b60405163278f794360e11b81526001600160a01b03841690634f1ef286903490610376908690869060040161065d565b6000604051808303818588803b15801561038f57600080fd5b505af11580156103a3573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146103d75760405162461bcd60e51b815260040161023f906106c0565b604051631b2ce7f360e11b81526001600160a01b038281166004830152831690633659cfe6906024016102e6565b6000546001600160a01b0316331461042f5760405162461bcd60e51b815260040161023f906106c0565b6001600160a01b0381166104945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161023f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000836001600160a01b03166040516101aa906303e1469160e61b815260040190565b600060208284031215610526578081fd5b81356105318161070b565b9392505050565b600060208284031215610549578081fd5b81516105318161070b565b60008060408385031215610566578081fd5b82356105718161070b565b915060208301356105818161070b565b809150509250929050565b6000806000606084860312156105a0578081fd5b83356105ab8161070b565b925060208401356105bb8161070b565b9150604084013567ffffffffffffffff808211156105d7578283fd5b818601915086601f8301126105ea578283fd5b8135818111156105fc576105fc6106f5565b604051601f8201601f19908116603f01168101908382118183101715610624576106246106f5565b8160405282815289602084870101111561063c578586fd5b82602086016020830137856020848301015280955050505050509250925092565b600060018060a01b038416825260206040818401528351806040850152825b818110156106985785810183015185820160600152820161067c565b818111156106a95783606083870101525b50601f01601f191692909201606001949350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461072057600080fd5b5056fea2646970667358221220d849f96f3086b9f82cdcf665adb8c697ace05638da1c7c16ab2d26293717af6764736f6c63430008020033",
      "r": "0x626575dbdfef932aea19842786d6ad3599ad7bf3b7a0c8b953acbe6d797c5f49",
      "s": "0x3e2ece3f118ad0909fdb26558ddaeab2d625b3ee8114fb38a157d37f938a4a74",
      "v": 160037,
      "creates": "0xD909CDA663fFF0C89866FC933df71841b1AaD354",
      "chainId": 80001
    }
  },
  "proxies": [
    {
      "address": "0x0DEBb5c9A8F81a3e16907062D7A535F9F24C7FAd",
      "txHash": "0x881299b770be789fdaf4b624bb56241709257bf61ba2cc631f00b2c91dac97a7",
      "kind": "transparent"
    },
    {
      "address": "0x6C305ACa67eF70De7f0ac4f588D39CEe47334D88",
      "txHash": "0x4243c923af3a86e88725f88d9b5ba7a5aef51397ea53ccba3cc747a05845cfb7",
      "kind": "transparent"
    },
    {
      "address": "0x09a9D4106e1F581D79F7DbD535901334D6C4842e",
      "txHash": "0x785231c680a823f02241a5c1e7458a7258549fa32ac6a4c23dc6d9c222cb6b0d",
      "kind": "transparent"
    },
    {
      "address": "0x968dA5B50b6031a3330D8b1719d3b09DeE7669a6",
      "txHash": "0x2a017bb59414c060e023eaa71590b0be18811b56cc68b37457163f584528b77e",
      "kind": "transparent"
    },
    {
      "address": "0xcf3A926931a32BaeC3f0af21814EAE3D1a0AEAa1",
      "txHash": "0xc4195534f6a3f02b9ea4e677e1de24c1e06eb7b7160446d0889df39234fbaad7",
      "kind": "transparent"
    }
  ],
  "impls": {
    "8f682354f29c5a62e59c812f61696038fbc469882fb723bc552ace2dc0a08c29": {
      "address": "0x57Cd3Fd1793D87adc04486Bf363a754E65219686",
      "txHash": "0x602dd424d4a106038dafa7af067e896779ee85099e2d67264e24cd8b485ec82f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:418"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:23"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:75"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:34"
          },
          {
            "contract": "ERC2981ContractWideRoyalties",
            "label": "_royaltiesRecipient",
            "type": "t_address",
            "src": "contracts/ERC2981ContractWideRoyalties.sol:11"
          },
          {
            "contract": "ERC2981ContractWideRoyalties",
            "label": "_royaltiesValue",
            "type": "t_uint256",
            "src": "contracts/ERC2981ContractWideRoyalties.sol:12"
          },
          {
            "contract": "NFTMemeMachine",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)1799_storage",
            "src": "contracts/NFTMemeMachine.sol:16"
          },
          {
            "contract": "NFTMemeMachine",
            "label": "cooldownTime",
            "type": "t_uint256",
            "src": "contracts/NFTMemeMachine.sol:19"
          },
          {
            "contract": "NFTMemeMachine",
            "label": "votingCooldownTime",
            "type": "t_uint256",
            "src": "contracts/NFTMemeMachine.sol:20"
          },
          {
            "contract": "NFTMemeMachine",
            "label": "memeToHash",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "contracts/NFTMemeMachine.sol:29"
          },
          {
            "contract": "NFTMemeMachine",
            "label": "hashToMeme",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/NFTMemeMachine.sol:31"
          },
          {
            "contract": "NFTMemeMachine",
            "label": "memeToImgHash",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "contracts/NFTMemeMachine.sol:33"
          },
          {
            "contract": "NFTMemeMachine",
            "label": "imgHashToMeme",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/NFTMemeMachine.sol:35"
          },
          {
            "contract": "NFTMemeMachine",
            "label": "userCooldown",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NFTMemeMachine.sol:37"
          },
          {
            "contract": "NFTMemeMachine",
            "label": "whitelist",
            "type": "t_mapping(t_string_memory_ptr,t_bytes32)",
            "src": "contracts/NFTMemeMachine.sol:39"
          },
          {
            "contract": "NFTMemeMachine",
            "label": "votingCooldown",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NFTMemeMachine.sol:41"
          },
          {
            "contract": "NFTMemeMachine",
            "label": "memeScore",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/NFTMemeMachine.sol:43"
          }
        ],
        "types": {
          "t_struct(Counter)1799_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_string_memory_ptr,t_bytes32)": {
            "label": "mapping(string => bytes32)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          }
        }
      }
    },
    "0e6c03e9021ea14f724334d03e08fc0bf0796fd2a1a13f8c5168f038ae0d14cb": {
      "address": "0xEEd3f4E3b0ef756b4bC637DE2810665d6543208B",
      "txHash": "0x55d457a5018bd97ebd9900a8a5f5cbf8b22f532c343967a601b3339d977ad59f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:418"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:23"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:75"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:34"
          },
          {
            "contract": "ERC2981ContractWideRoyalties",
            "label": "_royaltiesRecipient",
            "type": "t_address",
            "src": "contracts/ERC2981ContractWideRoyalties.sol:11"
          },
          {
            "contract": "ERC2981ContractWideRoyalties",
            "label": "_royaltiesValue",
            "type": "t_uint256",
            "src": "contracts/ERC2981ContractWideRoyalties.sol:12"
          },
          {
            "contract": "NFTMemeMachine",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)1799_storage",
            "src": "contracts/NFTMemeMachine.sol:16"
          },
          {
            "contract": "NFTMemeMachine",
            "label": "cooldownTime",
            "type": "t_uint256",
            "src": "contracts/NFTMemeMachine.sol:19"
          },
          {
            "contract": "NFTMemeMachine",
            "label": "votingCooldownTime",
            "type": "t_uint256",
            "src": "contracts/NFTMemeMachine.sol:20"
          },
          {
            "contract": "NFTMemeMachine",
            "label": "memeToHash",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "contracts/NFTMemeMachine.sol:29"
          },
          {
            "contract": "NFTMemeMachine",
            "label": "hashToMeme",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/NFTMemeMachine.sol:31"
          },
          {
            "contract": "NFTMemeMachine",
            "label": "memeToImgHash",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "contracts/NFTMemeMachine.sol:33"
          },
          {
            "contract": "NFTMemeMachine",
            "label": "imgHashToMeme",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/NFTMemeMachine.sol:35"
          },
          {
            "contract": "NFTMemeMachine",
            "label": "userCooldown",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NFTMemeMachine.sol:37"
          },
          {
            "contract": "NFTMemeMachine",
            "label": "whitelist",
            "type": "t_mapping(t_string_memory_ptr,t_bytes32)",
            "src": "contracts/NFTMemeMachine.sol:39"
          },
          {
            "contract": "NFTMemeMachine",
            "label": "votingCooldown",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NFTMemeMachine.sol:41"
          },
          {
            "contract": "NFTMemeMachine",
            "label": "memeScore",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/NFTMemeMachine.sol:43"
          },
          {
            "contract": "NFTMemeMachine",
            "label": "stashedMemes",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NFTMemeMachine.sol:45"
          },
          {
            "contract": "NFTMemeMachine",
            "label": "memeStash",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/NFTMemeMachine.sol:47"
          }
        ],
        "types": {
          "t_struct(Counter)1799_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_string_memory_ptr,t_bytes32)": {
            "label": "mapping(string => bytes32)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          }
        }
      }
    },
    "40c2a6c9351225eb4a21358979f7539a9f340ef55ad845101c6ffc8f87e52b83": {
      "address": "0x5b3D61639ee380412DD15C5Fd34ad69A4C0dB8C3",
      "txHash": "0x5b17fc33ea65b8131d485aa609e64b1fd7db750801b1a76e167a889b812a3330",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:418"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:23"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:75"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:34"
          },
          {
            "contract": "ERC2981ContractWideRoyalties",
            "label": "_royaltiesRecipient",
            "type": "t_address",
            "src": "contracts/ERC2981ContractWideRoyalties.sol:11"
          },
          {
            "contract": "ERC2981ContractWideRoyalties",
            "label": "_royaltiesValue",
            "type": "t_uint256",
            "src": "contracts/ERC2981ContractWideRoyalties.sol:12"
          },
          {
            "contract": "MemeMinter",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)1799_storage",
            "src": "contracts/NFTMemeMachine.sol:16"
          },
          {
            "contract": "MemeMinter",
            "label": "cooldownTime",
            "type": "t_uint256",
            "src": "contracts/NFTMemeMachine.sol:19"
          },
          {
            "contract": "MemeMinter",
            "label": "votingCooldownTime",
            "type": "t_uint256",
            "src": "contracts/NFTMemeMachine.sol:20"
          },
          {
            "contract": "MemeMinter",
            "label": "memeToHash",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "contracts/NFTMemeMachine.sol:29"
          },
          {
            "contract": "MemeMinter",
            "label": "hashToMeme",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/NFTMemeMachine.sol:31"
          },
          {
            "contract": "MemeMinter",
            "label": "memeToImgHash",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "contracts/NFTMemeMachine.sol:33"
          },
          {
            "contract": "MemeMinter",
            "label": "imgHashToMeme",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/NFTMemeMachine.sol:35"
          },
          {
            "contract": "MemeMinter",
            "label": "userCooldown",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NFTMemeMachine.sol:37"
          },
          {
            "contract": "MemeMinter",
            "label": "whitelist",
            "type": "t_mapping(t_bytes32,t_bytes32)",
            "src": "contracts/NFTMemeMachine.sol:39"
          },
          {
            "contract": "MemeMinter",
            "label": "whitelistTokenIds",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/NFTMemeMachine.sol:41"
          },
          {
            "contract": "MemeMinter",
            "label": "votingCooldown",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NFTMemeMachine.sol:43"
          },
          {
            "contract": "MemeMinter",
            "label": "memeScore",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/NFTMemeMachine.sol:45"
          },
          {
            "contract": "MemeMinter",
            "label": "stashedMemes",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NFTMemeMachine.sol:47"
          },
          {
            "contract": "MemeMinter",
            "label": "memeStash",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/NFTMemeMachine.sol:49"
          },
          {
            "contract": "MemeMinter",
            "label": "memePostings",
            "type": "t_mapping(t_uint256,t_array(t_string_storage)dyn_storage)",
            "src": "contracts/NFTMemeMachine.sol:51"
          }
        ],
        "types": {
          "t_struct(Counter)1799_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_bytes32,t_bytes32)": {
            "label": "mapping(bytes32 => bytes32)"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_uint256,t_array(t_string_storage)dyn_storage)": {
            "label": "mapping(uint256 => string[])"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          }
        }
      }
    },
    "a8b81aeff3a4d634d0386de2d4e678001c78d083aca2c5c2a15f8f59d8974678": {
      "address": "0x94110bD20aAa7869A4d8751E51e394Db752105B8",
      "txHash": "0x9c4b748efd68467ff37c39966dab754c2c11770b4590e265e7cc20d4c2adf6f6",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:418"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:23"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:75"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:34"
          },
          {
            "contract": "ERC2981ContractWideRoyalties",
            "label": "_royaltiesRecipient",
            "type": "t_address",
            "src": "contracts/ERC2981ContractWideRoyalties.sol:11"
          },
          {
            "contract": "ERC2981ContractWideRoyalties",
            "label": "_royaltiesValue",
            "type": "t_uint256",
            "src": "contracts/ERC2981ContractWideRoyalties.sol:12"
          },
          {
            "contract": "DankMinter",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)1799_storage",
            "src": "contracts/NFTMemeMachine.sol:16"
          },
          {
            "contract": "DankMinter",
            "label": "cooldownTime",
            "type": "t_uint256",
            "src": "contracts/NFTMemeMachine.sol:19"
          },
          {
            "contract": "DankMinter",
            "label": "votingCooldownTime",
            "type": "t_uint256",
            "src": "contracts/NFTMemeMachine.sol:20"
          },
          {
            "contract": "DankMinter",
            "label": "memeToHash",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "contracts/NFTMemeMachine.sol:29"
          },
          {
            "contract": "DankMinter",
            "label": "hashToMeme",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/NFTMemeMachine.sol:31"
          },
          {
            "contract": "DankMinter",
            "label": "memeToImgHash",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "contracts/NFTMemeMachine.sol:33"
          },
          {
            "contract": "DankMinter",
            "label": "imgHashToMeme",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/NFTMemeMachine.sol:35"
          },
          {
            "contract": "DankMinter",
            "label": "userCooldown",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NFTMemeMachine.sol:37"
          },
          {
            "contract": "DankMinter",
            "label": "votingCooldown",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NFTMemeMachine.sol:39"
          },
          {
            "contract": "DankMinter",
            "label": "memeScore",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/NFTMemeMachine.sol:41"
          },
          {
            "contract": "DankMinter",
            "label": "stashedMemes",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NFTMemeMachine.sol:43"
          },
          {
            "contract": "DankMinter",
            "label": "memeStash",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/NFTMemeMachine.sol:45"
          },
          {
            "contract": "DankMinter",
            "label": "memePostings",
            "type": "t_mapping(t_uint256,t_array(t_string_storage)dyn_storage)",
            "src": "contracts/NFTMemeMachine.sol:47"
          }
        ],
        "types": {
          "t_struct(Counter)1799_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_uint256,t_array(t_string_storage)dyn_storage)": {
            "label": "mapping(uint256 => string[])"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          }
        }
      }
    },
    "8d1a1608ca1d9b138c21d3d72bcd2bc2316e1641ad3b088e0c747c95aa16c74a": {
      "address": "0x29Bc669631D6C05E4F46e4456D065640FDdc0d61",
      "txHash": "0x44ddb7af6b80a71e17b350e9db95fdc786564da214c459905928819592134cc8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:24"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:33"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:39"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:418"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:23"
          },
          {
            "contract": "ERC721URIStorageUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:75"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol:34"
          },
          {
            "contract": "ERC2981ContractWideRoyalties",
            "label": "_royaltiesRecipient",
            "type": "t_address",
            "src": "contracts/ERC2981ContractWideRoyalties.sol:11"
          },
          {
            "contract": "ERC2981ContractWideRoyalties",
            "label": "_royaltiesValue",
            "type": "t_uint256",
            "src": "contracts/ERC2981ContractWideRoyalties.sol:12"
          },
          {
            "contract": "DankMinter",
            "label": "_tokenIdCounter",
            "type": "t_struct(Counter)1799_storage",
            "src": "contracts/NFTMemeMachine.sol:16"
          },
          {
            "contract": "DankMinter",
            "label": "cooldownTime",
            "type": "t_uint256",
            "src": "contracts/NFTMemeMachine.sol:19"
          },
          {
            "contract": "DankMinter",
            "label": "votingCooldownTime",
            "type": "t_uint256",
            "src": "contracts/NFTMemeMachine.sol:20"
          },
          {
            "contract": "DankMinter",
            "label": "memeToHash",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "contracts/NFTMemeMachine.sol:29"
          },
          {
            "contract": "DankMinter",
            "label": "hashToMeme",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/NFTMemeMachine.sol:31"
          },
          {
            "contract": "DankMinter",
            "label": "memeToImgHash",
            "type": "t_mapping(t_uint256,t_bytes32)",
            "src": "contracts/NFTMemeMachine.sol:33"
          },
          {
            "contract": "DankMinter",
            "label": "imgHashToMeme",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "contracts/NFTMemeMachine.sol:35"
          },
          {
            "contract": "DankMinter",
            "label": "userCooldown",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NFTMemeMachine.sol:37"
          },
          {
            "contract": "DankMinter",
            "label": "votingCooldown",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NFTMemeMachine.sol:39"
          },
          {
            "contract": "DankMinter",
            "label": "memeScore",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/NFTMemeMachine.sol:41"
          },
          {
            "contract": "DankMinter",
            "label": "stashedMemes",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/NFTMemeMachine.sol:43"
          },
          {
            "contract": "DankMinter",
            "label": "memeStash",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/NFTMemeMachine.sol:45"
          },
          {
            "contract": "DankMinter",
            "label": "memePostings",
            "type": "t_mapping(t_uint256,t_array(t_string_storage)dyn_storage)",
            "src": "contracts/NFTMemeMachine.sol:47"
          }
        ],
        "types": {
          "t_struct(Counter)1799_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_bytes32)": {
            "label": "mapping(uint256 => bytes32)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_uint256,t_array(t_string_storage)dyn_storage)": {
            "label": "mapping(uint256 => string[])"
          },
          "t_array(t_string_storage)dyn_storage": {
            "label": "string[]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          }
        }
      }
    }
  }
}
